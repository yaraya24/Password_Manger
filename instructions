*** PASSWORD MANAGER ****
1. First step is to explain the program
2. There should then be an option to log in or sign up
3. Sign up would involve providing your email address - and setting a super PASSWORD
4. Once account is created, you can add services that require passwords
5. The system will then create a password for every service you decide to include
6. Every 30 days, program will remind you to update your password
7. All passwords will show the previous password in case you haven't updated it on the actual website
8. You can edit your master password
9. In the backend, we will be using text files that are hashed?


 *** ENCRYPTION PROCESS ***
We can use the cryptography module to generate a key and save it.
Once we have generated a key, we need to load the key that was generated by reading it from a file.

    - We then encode the message
    - Initialize the Fernet Class?
    - pass the encoded message to encrypt() method

**** HOW IT WORKS *****
1. Upon creation of an accout - a long and complicated master password is created
2. When logging in - the user input + (maybe salt) is hashed and if the process of hashing the passowrd equals the hashed master password - SUCCESS
3. The fernet encryption process has a key of 44 characters ending with an equal sign
4. Use a for loop that will add (43 - len(master_password)) of random characters to be used as the key (and then add an equal sign)
5. The key is never stored in the system - just the extra string to be added onto the master password for it to be a unique key
6. The above key will be used to encrypt randomly generated passwords and names (maybe the whole fucking file)

The above steps show that the program will only hold the hash of the master passwrord and that extra random string to be attached onto the master_password. It will also
store the encrypted passwords.

**FILE STRUCTURE ** (CSV?)

filenamename = username
Hash : {hash of password}
SALT : {unique random Salt for password}
Encoder: {44 - len(password) key}
Gap : {"XX"}
facebook : {password}
gmail : {password}
TFN : {message/code/secret} 





